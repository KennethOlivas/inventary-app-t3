// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// dbdocs build  ./prisma/schema.prisma
generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
    id    String @id @default(cuid())
    name  String
    users User[]
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    position      String?
    description   String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Role          Role?     @relation(fields: [roleId], references: [id])
    roleId        String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// model product 
model Product {
    id          String   @id @default(uuid())
    name        String
    description String?
    price       Int
    image       String?
    stock       Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Order       Order?   @relation(fields: [orderId], references: [id])
    orderId     String?
}

enum ShippingStatus {
    REDY_TO_SHIP
    SHIPPED
    DELIVERED
}

model Shipping {
    id         String         @id @default(uuid())
    name       String
    price      Int
    city       String
    address    String
    status     ShippingStatus
    deliveryAt DateTime
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    Order      Order?         @relation(fields: [orderId], references: [id])
    orderId    String?        @unique
}

enum Status {
    PENDING
    COMPLETED
    CANCELED
}

model Order {
    id            String    @id @default(uuid())
    createdAt     DateTime  @default(now())
    invoiceNumber String    @unique
    updatedAt     DateTime  @updatedAt
    status        Status
    shipping      Boolean
    subTotal      Float
    iva           Float
    total         Float
    products      Product[]
    Customer      Customer  @relation(fields: [customerId], references: [id])
    customerId    String
    Shipping      Shipping?
}

model Customer {
    id        String   @id @default(uuid())
    name      String
    lastName  String
    email     String
    phone     String
    address   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Orders    Order[]
}
