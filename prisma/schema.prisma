generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    ADMIN
    USER
    VENDOR
    LOGISTICS
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    position      String?
    description   String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    roles         Role[]    @default([USER])
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @updatedAt
    Order         Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id           String         @id @default(uuid())
    name         String
    description  String?
    price        Int
    image        String?
    stock        Int
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    orderId      String?
    ProductOrder ProductOrder[]
}

enum ShippingStatus {
    REDY_TO_SHIP
    SHIPPED
    DELIVERED
}

model Shipping {
    id         String         @id @default(uuid())
    name       String
    price      Int
    city       String
    address    String
    status     ShippingStatus
    deliveryAt DateTime
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    Order      Order?         @relation(fields: [orderId], references: [id])
    orderId    String?        @unique
}

enum Status {
    PENDING
    COMPLETED
    CANCELED
}

model ProductOrder {
    id        String   @id @default(uuid())
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Order     Order?   @relation(fields: [orderId], references: [id])
    orderId   String?
    Product   Product? @relation(fields: [productId], references: [id])
    productId String?
}

model Order {
    id            String         @id @default(uuid())
    createdAt     DateTime       @default(now())
    invoiceNumber String         @unique
    updatedAt     DateTime       @updatedAt
    status        Status
    shipping      Boolean
    subTotal      Float
    iva           Float
    total         Float
    Customer      Customer       @relation(fields: [customerId], references: [id])
    customerId    String
    Shipping      Shipping?
    ProductOrder  ProductOrder[]
    User          User?          @relation(fields: [userId], references: [id])
    userId        String?
}

enum Cities {
    Chinandega
    Esteli
    Leon
    Managua
    Masaya
    Matagalpa
    Rivas
    Granada
    Jinotega
    Carazo
    Boaco
    Madriz
    Chontales
    NuevaSegovia
    RioSanJuan
}

model Customer {
    id        String   @id @default(uuid())
    name      String
    lastName  String
    email     String
    phone     String
    address   String
    city      Cities?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Orders    Order[]
}
